import subprocess
import csv
import time
import os
import json
from config import STATS_FILE, NUM_RUNS, PARAMS_PATH
from utils.plotter import plot_cache_hits_per_session

# üîÅ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –æ—á–∏—Å—Ç–∏—Ç–∏ —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
with open(STATS_FILE, "w", newline="") as f:
    pass  # –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª, –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø–∏—Å—É

# üìå –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ main.py
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
MAIN_PATH = os.path.join(SCRIPT_DIR, "main.py")

print(f"üìä –ó–∞–ø—É—Å–∫–∞—î–º–æ {NUM_RUNS} —Å–µ—Å—ñ–π –∫–µ—à—É–≤–∞–Ω–Ω—è...\n")

for i in range(NUM_RUNS):
    print(f"üîÅ –ó–∞–ø—É—Å–∫ {i+1}/{NUM_RUNS}")
    reset_flag = "1" if i == 0 else "0"
    #reset_flag = "0"

    if reset_flag == "1":
        default_params = {
            "ALPHA": 1,
            "GAMMA": 0.95,
            "EPSILON_START": 0.95,
            "EPSILON_MIN": 0.1,
            "EPSILON_DECAY": 0.01,
            "ETA_START": 0.9,
            "ETA_MIN": 0.1,
            "ETA_DECAY_K": 0.001
        }
        with open(PARAMS_PATH, "w") as f:
            json.dump(default_params, f, indent=2)

    result = subprocess.run(
        ["python", MAIN_PATH, "--reset", reset_flag],
        capture_output=True,
        text=True,
        cwd=SCRIPT_DIR
    )

    if result.returncode != 0:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É main.py:\n{result.stderr}")
    else:
        print(f"‚úÖ main.py –∑–∞–≤–µ—Ä—à–∏–≤—Å—è —É—Å–ø—ñ—à–Ω–æ")
        print(result.stdout.strip())  # –∞–±–æ –≤–∏–º–∫–Ω–∏ –¥–ª—è —Ç–∏—à—ñ

    time.sleep(0.5)

# === üìä –ü—ñ—Å–ª—è –≤—Å—ñ—Ö –∑–∞–ø—É—Å–∫—ñ–≤: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫ ===

int_total = 0
lru_total = 0
lfu_total = 0

int_list, lru_list, lfu_list = [], [], []

with open(STATS_FILE, "r") as f:
    reader = csv.reader(f)
    for row in reader:
        if not row:
            continue
        i, l, f_ = map(int, row)
        int_total += i
        lru_total += l
        lfu_total += f_
        int_list.append(i)
        lru_list.append(l)
        lfu_list.append(f_)

if not int_list:
    print("\n‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É run_stats.csv ‚Äî –∂–æ–¥–Ω–∞ —Å–µ—Å—ñ—è –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
    exit(0)

runs = len(int_list)
avg_int = int_total / runs
avg_lru = lru_total / runs
avg_lfu = lfu_total / runs

improvement_vs_lru = 100 * (avg_int - avg_lru) / avg_lru
improvement_vs_lfu = 100 * (avg_int - avg_lfu) / avg_lfu

print("\n=== üìä –ü–Ü–î–°–£–ú–ö–ò –ó–ê –í–°–Ü –°–ï–°–Ü–á ===")
print(f"–°–µ—Ä–µ–¥–Ω—ñ–π –∫–µ—à-—Ö—ñ—Ç (Intellectual): {avg_int:.2f}")
print(f"–°–µ—Ä–µ–¥–Ω—ñ–π –∫–µ—à-—Ö—ñ—Ç (LRU):          {avg_lru:.2f}")
print(f"–°–µ—Ä–µ–¥–Ω—ñ–π –∫–µ—à-—Ö—ñ—Ç (LFU):          {avg_lfu:.2f}")
print(f"\n–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞–¥ LRU:              {improvement_vs_lru:.2f}%")
print(f"–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞–¥ LFU:              {improvement_vs_lfu:.2f}%")

plot_cache_hits_per_session(int_list, lru_list, lfu_list)